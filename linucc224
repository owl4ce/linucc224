#!/usr/bin/env sh

# Desc:   POSIX sh script to patch Linux kernel source code with custom framebuffer logo.
# Author: Harry Kurn <alternate-se7en@pm.me>
# URL:    https://github.com/owl4ce/linucc224

# SPDX-License-Identifier: GPL-2.0

# Speeds up script-execution by using C or POSIX locale instead of UTF-?? locales.
export LANG='POSIX'

# ANSI color escape sequences.
NC='\033[0m' \
R='\033[1;31m' \
r='\033[0;31m' \
G='\033[1;32m' \
g='\033[4;32m' \
b='\033[0;34m' \
m='\033[0;35m' \
W='\033[1;37m'

# Output messages and error code marker.
die() { >&2 printf "${R} %s${NC} %b\n" '> error:' "${@}"; RC=1; }
msg() {     printf "${G} %s${NC} %b\n"              '>' "${@}"; }
str() { >&2 printf "${R}%s${NC}\n"                       '~~~'; }

# Dependencies checker.
check_deps()
{
    while [ -n "$1" ]; do
        if [ "$1" = 'sudo' -o "$1" = 'doas' ]; then
            [ -x "$(command -v "$1")" ] && PRIV="$1"
        elif [ "$1" != 'sudo' -o "$1" != 'doas' ] && [ ! -x "$(command -v "$1")" ]; then
            die "${m}${1}${NC} is not installed. Install it first! ${r}ツ${NC}"
            if [ "$1" = 'ppmquant' ]; then # Special message for netpbm's ppmquant.
                msg "${m}netpbm${NC} is required for converting purpose! ${m}ツ${NC}"
            fi
        fi
        shift
    done
}

# Diffs between changes if verbose enabled.
show_diff()
{
    if [ -n "$VERBOSE" ] && [ -x "$(command -v diff)" ]; then
        str ; >&2 diff --color=auto -u "$1" "$2" ; str
    fi
}

# Copy and move, with v if verbose enabled.
copy() { ${PRIV} >&2 cp -f${VERBOSE} "$1" "$2"; }
move() { ${PRIV} >&2 mv -f${VERBOSE} "$1" "$2"; }

# Press enter or return to continue.
return_confirm()
{
    while :; do
        msg "${m}[${NC}${R}enter${NC}/${R}return${NC} to continue${m}] [${NC}${R}ctrl${NC}+${R}c${NC} to cancel${m}]${NC}"
        if read wrong_key && [ -n "$wrong_key" ]; then
            die "You pressed the wrong button! (${m}${wrong_key}${NC})"
            unset RC
        else
            break
        fi
    done
}

# Just call `coexit` instead of `exit $?`, we don't use `return <num>` here.
# So if `die` called, the RC var will return with 1 as well as return codes.
coexit() { [ ${RC:-0} -eq 1 ] && exit ${RC} ||:; } # Except for help option.

# Check all required dependencies.
check_deps pngtopnm ppmquant pnmtoplainpnm file basename dirname grep cut tr sed cp mv uname doas sudo
[ -n "$PRIV" ] || die "${m}sudo${NC} or ${m}doas${NC} not installed on your system! ${r}ツ${NC}"
coexit # Exit with correct return code if the one of all above dependencies are not exists.

# Help messages.
help()
{
    printf "\n${R}*${NC} Easily add your own Linux framebuffer logo by patching it!\n"
    printf "\n${W}USAGE:${NC}"
    printf "\n  $(basename ${0}) ${b}[${m}options${b}]${NC} ${g}/path/to/kernel_sources${NC}\n"
    printf "\n${W}OPTIONS:${NC}"
    printf "\n  ${m}-p ${g}/path/to/your_logo${NC}			${r}[${NC}    patch    ${r}]${NC}"
    printf "\n  ${m}-r					${r}[${NC} restore all ${r}]${NC}"
    printf "\n  ${m}-v					${r}[${NC}   verbose   ${r}]${NC}"
    printf "\n  ${m}-h					${r}[${NC}  show help  ${r}]${NC}\n"
    printf "\nhttps://github.com/owl4ce/linucc224\n\n"
    exit ${?}
}

# Detect the valid Linux kernel source.
detect_kernel()
{
    # System-installed kernel source directory.
    LIBMOD="/lib/modules/$(uname -r)/source"
    # The default "logo_linux_clut224.ppm" file.
    LINUCC="drivers/video/logo/logo_linux_clut224.ppm"
    
    # There are contains 3 levels: manual locate, system-installed, and invalid Linux kernel.
    if [ -L "${@}" -o -d "${@}" ] 2>/dev/null && [ -f "${@}/${LINUCC}" ]; then # Manual.
        msg "Linux kernel source detected as valid source! ${m}ツ${NC}"
        KERNEL_SOURCE="${@}"
        msg "${g}${KERNEL_SOURCE}${NC}"
    elif [ -L "$LIBMOD" -o -d "$LIBMOD" ] && [ -f "${LIBMOD}/${LINUCC}" ]; then # System.
        msg "Linux kernel source not manually located or invalid source! Using valid fallback .."
        KERNEL_SOURCE="$LIBMOD"
        msg "${g}${KERNEL_SOURCE}${NC}"
    else
        die "Invalid Linux kernel source! See help option (${m}-h${NC})."
    fi
    coexit
    
    # Test kernel source write permissions.
    [ ! -w "$KERNEL_SOURCE" ] || unset PRIV
    
    # "linux_logo.h".
    LINUX_H="${KERNEL_SOURCE}/include/linux/linux_logo.h"
    # Logo directory.
    DRIVLOG="${KERNEL_SOURCE}/drivers/video/logo"
    # "Kconfig".
    KCONFIG="${DRIVLOG}/Kconfig"
    # "logo.c".
    LOGO__C="${DRIVLOG}/logo.c"
    # "Makefile".
    MK_FILE="${DRIVLOG}/Makefile"
    # Backup file-name.
    BUP_EXT="linucc224_orig"
}

# Convert the image from any ".ext" into ".ppm".
any2ppm()
{
    # Identify if the argument is valid image file.
    ident()
    {
        { identify "${@}" >/dev/null 2>&1 || file "${@}" | grep -qE 'image|bitmap'; } && \
        msg "$(file "$LOGO" | cut -d' ' -f2-)"
    }
    
    if ident "$LOGO"; then
        if ! file "$LOGO" | grep -Fq '80'; then # Verify if the image file size is 80x80 pixel.
            msg "The image file size is not ${m}80${NC}x${m}80${NC}! Are you sure to continue?"
            return_confirm
        fi
        
        # The final lowercase file-name and path.
        LOGONM="$(basename "$LOGO" | cut -d'.' --complement -f2- | tr '[:upper:]' '[:lower:]')"
        DOTPPM="$(dirname "$LOGO")/logo_${LOGONM}_clut224.ppm"
        
        msg "Detected ${g}${LOGO}${NC} as valid image file. Converting .."
        if pngtopnm "$LOGO" | ppmquant -fs 223 | pnmtoplainpnm > "$DOTPPM"; then
            msg "Saved as ${g}${DOTPPM}${NC}"
        else
            die "Failed to convert."
        fi
        
        [ ! -f "$DOTPPM" ] || msg "$(file "$DOTPPM" | cut -d' ' -f2-)"
    else
        die "${g}${LOGO}${NC} is an invalid image file! ${r}ツ${NC}"
    fi
    coexit
}

# Patch the Linux kernel source.
patch_kernel()
{
    ptc_msg() { msg "Patching ${g}${@}${NC} .."                                  ; }
    alr_msg() { die "${g}${@}${NC} already patched! ** ${m}${LOGOCAP}${NC} **"   ; }
    die_msg() { die "Failed to patch ${g}${@}${NC} from the Linux kernel source."; }
    
    # UPPERCASE and Capital logo name conversion.
    LOGOUPC="$(echo "$LOGONM" | tr '[:lower:]' '[:upper:]')"
    LOGOCAP="$(echo "$LOGONM" | sed 's/.*/\u&/')"
    
    msg "Patching Linux kernel source code .."
    return_confirm ; ${PRIV} echo '' >/dev/null
    
    # "logo_?_clut224.ppm".
    if [ -f "$DOTPPM" ]; then
        msg "Installing converted logo into ${g}${DRIVLOG}/${NC} .."
        copy "$DOTPPM" "${DRIVLOG}/." || die "Failed to install ${g}${DOTPPM}${NC} into Linux kernel source."
    fi
    
    # "Kconfig".
    if [ -f "$KCONFIG" ] && grep -Fqo "LOGO_${LOGOUPC}_CLUT224" "$KCONFIG"; then
        alr_msg "$KCONFIG"
    elif [ -f "$KCONFIG" ]; then
        ptc_msg "$KCONFIG"
        [ -f "${KCONFIG}.${BUP_EXT}" ] || copy "$KCONFIG" "${KCONFIG}.${BUP_EXT}"
        ${PRIV} sed -i "/^config LOGO_LINUX_CLUT224/i \
	config LOGO_${LOGOUPC}_CLUT224\n\
	bool \"Custom 224-color ${LOGOCAP} logo\"\n\
	default y\n" "$KCONFIG" && \
        show_diff "${KCONFIG}.${BUP_EXT}" "$KCONFIG" || die_msg "Kconfig"
    fi
    
    # "logo.c".
    if [ -f "$LOGO__C" ] && grep -Fqo "CONFIG_LOGO_${LOGOUPC}_CLUT224" "$LOGO__C"; then
        alr_msg "$LOGO__C"
    elif [ -f "$LOGO__C" ]; then
        ptc_msg "$LOGO__C"
        [ -f "${LOGO__C}.${BUP_EXT}" ] || copy "$LOGO__C" "${LOGO__C}.${BUP_EXT}"
        ${PRIV} sed -i "/^#ifdef CONFIG_LOGO_LINUX_CLUT224/i \
#ifdef CONFIG_LOGO_${LOGOUPC}_CLUT224\n\
		/* Custom ${LOGOCAP} logo */\n\
		logo = &logo_${LOGONM}_clut224;\n\
#endif" "$LOGO__C" && \
        show_diff "${LOGO__C}.${BUP_EXT}" "$LOGO__C" || die_msg "logo.c"
    fi
    
    # "Makefile".
    if [ -f "$MK_FILE" ] && grep -Fqo "logo_${LOGONM}_clut224.o" "$MK_FILE"; then
        alr_msg "$MK_FILE"
    elif [ -f "$MK_FILE" ]; then
        ptc_msg "$MK_FILE"
        [ -f "${MK_FILE}.${BUP_EXT}" ] || copy "$MK_FILE" "${MK_FILE}.${BUP_EXT}"
        ${PRIV} sed -i "/^obj-\$(CONFIG_LOGO_LINUX_CLUT224)	+= logo_linux_clut224.o/i \
obj-\$(CONFIG_LOGO_${LOGOUPC}_CLUT224)	+= logo_${LOGONM}_clut224.o" "$MK_FILE" && \
        show_diff "${MK_FILE}.${BUP_EXT}" "$MK_FILE" || die_msg "Makefile"
    fi
    
    # "linux_logo.h".
    if [ -f "$LINUX_H" ] && grep -Fqo "logo_${LOGONM}_clut224" "$LINUX_H"; then
        alr_msg "$LINUX_H"
    elif [ -f "$LINUX_H" ]; then
        ptc_msg "$LINUX_H"
        [ -f "${LINUX_H}.${BUP_EXT}" ] || copy "$LINUX_H" "${LINUX_H}.${BUP_EXT}"
        ${PRIV} sed -i "/^extern const struct linux_logo logo_linux_clut224;/i \
extern const struct linux_logo logo_${LOGONM}_clut224;" "$LINUX_H" && \
        show_diff "${LINUX_H}.${BUP_EXT}" "$LINUX_H" || die_msg "linux_logo.h"
    fi
    
    coexit
    
    msg "The Linux kernel source successfully patched."
    msg "It's time for you to turn on the new logo! ${m}ツ${NC}"
    msg "${W}menuconfig:${NC} ${m}Device Drivers${NC} -> ${m}Graphics support${NC} -> ${m}Bootup logo${NC}"
    msg "${W}   .config:${NC} CONFIG_${LOGOUPC}_LINUX_CLUT224=y"
}

# Restore all applied logo in the Linux kernel source.
restore_kernel()
{
    rtr_msg() { msg "Restoring original ${g}${@}${NC} .."                                   ; }
    alr_msg() { die "${g}${@}${NC} already clean! ${m}ツ${NC}"                               ; }
    die_msg() { die "Failed to restore original ${g}${@}${NC} from the Linux kernel source."; }
    
    msg "Restoring Linux kernel source code .."
    return_confirm ; ${PRIV} echo '' >/dev/null
    
    # "Kconfig".
    if [ -f "${KCONFIG}.${BUP_EXT}" ]; then
        rtr_msg "$KCONFIG"
        move "${KCONFIG}.${BUP_EXT}" "$KCONFIG" || die_msg "Kconfig"
    elif [ ! -f "${KCONFIG}.${BUP_EXT}" ]; then
        alr_msg "$KCONFIG"
    fi
    
    # "logo.c".
    if [ -f "${LOGO__C}.${BUP_EXT}" ]; then
        rtr_msg "$LOGO__C"
        move "${LOGO__C}.${BUP_EXT}" "$LOGO__C" || die_msg "logo.c"
    elif [ ! -f "${LOGO__C}.${BUP_EXT}" ]; then
        alr_msg "$LOGO__C"
    fi
    
    # "Makefile".
    if [ -f "${MK_FILE}.${BUP_EXT}" ]; then
        rtr_msg "$MK_FILE"
        move "${MK_FILE}.${BUP_EXT}" "$MK_FILE" || die_msg "Makefile"
    elif [ ! -f "${MK_FILE}.${BUP_EXT}" ]; then
        alr_msg "$MK_FILE"
    fi
    
    # "linux_logo.h".
    if [ -f "${LINUX_H}.${BUP_EXT}" ]; then
        rtr_msg "$LINUX_H"
        move "${LINUX_H}.${BUP_EXT}" "$LINUX_H" || die_msg "linux_logo.h"
    elif [ ! -f "${LINUX_H}.${BUP_EXT}" ]; then
        alr_msg "$LINUX_H"
    fi
    
    coexit
    
    # "logo_?_clut224.ppm".
    msg "The converted logo such ${g}logo_?_clut224.ppm${NC} not removed from the Linux kernel source."
    msg "You may need to remove it manually! ${m}ツ${NC}"
}

# Parse all options firstly.
while getopts ':p:rvh' OPTS; do
    case "$OPTS" in
        p)  LOGO="$OPTARG"
        ;;
        r)  RESTORE=1
        ;;
        v)  VERBOSE=v
        ;;
        h)  help
        ;;
        \?) die "Invalid option! (${m}-${OPTARG}${NC})"
        ;;
        :)  die "Detected (${m}-${OPTARG}${NC}) without argument."
            if [ "$OPTARG" = 'p' ]; then # Special message for `-p` option.
                die "Please locate your image file! See help option (${m}-h${NC})."
            fi
        ;;
    esac
done

shift $((OPTIND-1))

[ ${OPTIND} -ne 1 ] || help

# Detect the last arguments as Linux kernel source.
detect_kernel "${@}"

# Restore the Linux kernel source or apply a patch.
if [ "${RESTORE:-0}" -eq 1 ]; then
    restore_kernel
fi
if [ -n "$LOGO" ]; then
    any2ppm && patch_kernel
fi
